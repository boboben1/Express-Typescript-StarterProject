{"version":3,"sources":["app.js","../src/app.ts"],"names":["Object","defineProperty","exports","value","fs","require","http","https","app_config_1","express","express_middleware_1","_util_1","Routes","App","options","onError","error","syscall","bind","port","code","console","process","exit","onListening","addr","server","address","log","K","app","normalizePort","set","initializeMiddleware","initializeCors","initializeRoutes","initializeServer","use","cookieParser","bodyParser","json","urlencoded","extended","expressValidator","index","req","res","next","header","cors","origin","createServer","listen","on","useHttps","_key","readFileSync","key","_cert","cert","AppConfig","default"],"mappings":"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","file":"app.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\n/* HTTP Imports */\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst app_config_1 = require(\"./app.config\");\n/* Express Imports */\nconst express = require(\"express\");\nconst express_middleware_1 = require(\"./express.middleware\");\nconst _util_1 = require(\"@util\");\nconst Routes = require(\"./routes\");\nclass App extends app_config_1.AppConfig {\n    constructor(options) {\n        super();\n        this.onError = (error) => {\n            if (error.syscall !== 'listen') {\n                throw error;\n            }\n            const bind = typeof this.port === 'string'\n                ? 'Pipe ' + this.port\n                : 'Port ' + this.port;\n            // handle specific listen errors with friendly messages\n            switch (error.code) {\n                case 'EACCES':\n                    console.error(bind + ' requires elevated privileges');\n                    process.exit(1);\n                    break;\n                case 'EADDRINUSE':\n                    console.error(bind + ' is already in use');\n                    process.exit(1);\n                    break;\n                default:\n                    throw error;\n            }\n        };\n        this.onListening = () => {\n            const addr = this.server.address();\n            const bind = typeof addr === 'string'\n                ? 'pipe ' + addr\n                : 'port ' + addr.port;\n            console.log('Listening on ' + bind);\n        };\n        for (const K in options) {\n            this[K] = options[K];\n        }\n    }\n    initialize() {\n        this.app = express();\n        this.port = _util_1.normalizePort(this.port);\n        this.app.set('port', this.port);\n        this.initializeMiddleware();\n        this.initializeCors();\n        this.initializeRoutes();\n        this.initializeServer();\n    }\n    initializeMiddleware() {\n        /* Initialize Middleware */\n        this.app.use(express_middleware_1.cookieParser());\n        this.app.use(express_middleware_1.bodyParser.json());\n        this.app.use(express_middleware_1.bodyParser.urlencoded({ extended: true }));\n        this.app.use(express_middleware_1.expressValidator());\n    }\n    initializeRoutes() {\n        this.app.use('/', Routes.index);\n    }\n    initializeCors() {\n        /* Allow CORS */\n        this.app.use((req, res, next) => {\n            res.header('Access-Control-Allow-Origin', this.cors.origin);\n            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n            next();\n        });\n    }\n    initializeServer() {\n        this.server = this.createServer();\n        this.server.listen(this.port);\n        this.server.on('error', this.onError);\n        this.server.on('listening', this.onListening);\n    }\n    createServer() {\n        if (this.useHttps) {\n            const _key = fs.readFileSync(this.key);\n            const _cert = fs.readFileSync(this.cert);\n            return https.createServer({ key: _key, cert: _cert }, this.app);\n        }\n        return http.createServer(this.app);\n    }\n}\nexports.default = App;\n","import * as fs from 'fs';\r\n\r\n\r\n/* HTTP Imports */\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\n\r\nimport {AppConfig} from './app.config';\r\n\r\n/* Express Imports */\r\nimport * as express from 'express';\r\nimport {cookieParser, bodyParser, expressValidator} from './express.middleware';\r\n\r\n\r\nimport {Partial, Nullable, normalizePort} from '@util';\r\n\r\nimport * as Routes from './routes';\r\n\r\nexport default class App extends AppConfig {\r\n\r\n    server: http.Server | https.Server;\r\n    app: express.Application;\r\n    \r\n    constructor(options: AppConfig) {\r\n        super();\r\n        \r\n        for (const K in options) {\r\n            this[K] = options[K];\r\n        }\r\n    }\r\n\r\n    initialize() {\r\n        this.app = express();\r\n        this.port = normalizePort(this.port);\r\n        this.app.set('port', this.port);\r\n\r\n        this.initializeMiddleware();\r\n        this.initializeCors();\r\n        this.initializeRoutes();\r\n        this.initializeServer();\r\n    }\r\n\r\n    initializeMiddleware() {\r\n        /* Initialize Middleware */\r\n        this.app.use(cookieParser());\r\n    \r\n        this.app.use(bodyParser.json());\r\n        this.app.use(bodyParser.urlencoded({extended: true}));\r\n    \r\n        this.app.use(expressValidator());\r\n    }\r\n        \r\n    initializeRoutes() {\r\n        this.app.use('/', Routes.index);\r\n    }\r\n\r\n    initializeCors() {\r\n        /* Allow CORS */\r\n        this.app.use((req, res, next) => {\r\n            res.header('Access-Control-Allow-Origin', this.cors.origin);\r\n            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n            next();\r\n        });\r\n    }\r\n\r\n\r\n    initializeServer() {\r\n        this.server = this.createServer();\r\n        this.server.listen(this.port);\r\n\r\n        this.server.on('error', this.onError);\r\n        this.server.on('listening', this.onListening);\r\n    }\r\n\r\n    createServer() {\r\n        if (this.useHttps) {\r\n            const _key = fs.readFileSync(this.key);\r\n            const _cert = fs.readFileSync(this.cert);\r\n            return https.createServer({key: _key, cert: _cert}, this.app);\r\n        }\r\n        return http.createServer(this.app);\r\n    }\r\n\r\n    onError = (error: any) => {\r\n        if (error.syscall !== 'listen') {\r\n            throw error;\r\n        }\r\n    \r\n        const bind = typeof this.port === 'string'\r\n            ? 'Pipe ' + this.port\r\n            : 'Port ' + this.port;\r\n    \r\n        // handle specific listen errors with friendly messages\r\n        switch (error.code) {\r\n            case 'EACCES':\r\n            console.error(bind + ' requires elevated privileges');\r\n            process.exit(1);\r\n            break;\r\n            case 'EADDRINUSE':\r\n            console.error(bind + ' is already in use');\r\n            process.exit(1);\r\n            break;\r\n            default:\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    onListening = () => {\r\n        const addr = this.server.address();\r\n        const bind = typeof addr === 'string'\r\n            ? 'pipe ' + addr\r\n            : 'port ' + addr.port;\r\n        console.log('Listening on ' + bind);\r\n    }\r\n\r\n}"]}