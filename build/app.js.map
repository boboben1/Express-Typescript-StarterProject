{"version":3,"sources":["app.js","../src/app.ts"],"names":["Object","defineProperty","exports","value","fs","require","http","https","app_config_1","express","express_middleware_1","_util_1","Routes","App","AppConfig","constructor","options","onError","error","syscall","bind","port","code","console","process","exit","onListening","addr","server","address","log","K","initialize","app","normalizePort","set","initializeMiddleware","initializeCors","initializeRoutes","initializeServer","use","cookieParser","bodyParser","json","urlencoded","extended","expressValidator","index","req","res","next","header","cors","origin","createServer","listen","on","useHttps","_key","readFileSync","key","_cert","cert","default"],"mappings":"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","file":"app.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\n/* HTTP Imports */\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst app_config_1 = require(\"./app.config\");\n/* Express Imports */\nconst express = require(\"express\");\nconst express_middleware_1 = require(\"./express.middleware\");\nconst _util_1 = require(\"@util\");\nconst Routes = require(\"./routes\");\nclass App extends app_config_1.AppConfig {\n    constructor(options) {\n        super();\n        this.onError = (error) => {\n            if (error.syscall !== 'listen') {\n                throw error;\n            }\n            const bind = typeof this.port === 'string'\n                ? 'Pipe ' + this.port\n                : 'Port ' + this.port;\n            // handle specific listen errors with friendly messages\n            switch (error.code) {\n                case 'EACCES':\n                    console.error(bind + ' requires elevated privileges');\n                    process.exit(1);\n                    break;\n                case 'EADDRINUSE':\n                    console.error(bind + ' is already in use');\n                    process.exit(1);\n                    break;\n                default:\n                    throw error;\n            }\n        };\n        this.onListening = () => {\n            const addr = this.server.address();\n            const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;\n            console.log('Listening on ' + bind);\n        };\n        for (const K in options) {\n            this[K] = options[K];\n        }\n    }\n    initialize() {\n        this.app = express();\n        this.port = _util_1.normalizePort(this.port);\n        this.app.set('port', this.port);\n        this.initializeMiddleware();\n        this.initializeCors();\n        this.initializeRoutes();\n        this.initializeServer();\n    }\n    initializeMiddleware() {\n        /* Initialize Middleware */\n        this.app.use(express_middleware_1.cookieParser());\n        this.app.use(express_middleware_1.bodyParser.json());\n        this.app.use(express_middleware_1.bodyParser.urlencoded({ extended: true }));\n        this.app.use(express_middleware_1.expressValidator());\n    }\n    initializeRoutes() {\n        this.app.use('/', Routes.index);\n    }\n    initializeCors() {\n        /* Allow CORS */\n        this.app.use((req, res, next) => {\n            res.header('Access-Control-Allow-Origin', this.cors ? this.cors.origin : '*');\n            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n            next();\n        });\n    }\n    initializeServer() {\n        this.server = this.createServer();\n        this.server.listen(this.port);\n        this.server.on('error', this.onError);\n        this.server.on('listening', this.onListening);\n    }\n    createServer() {\n        if (this.useHttps) {\n            const _key = fs.readFileSync(this.key);\n            const _cert = fs.readFileSync(this.cert);\n            return https.createServer({ key: _key, cert: _cert }, this.app);\n        }\n        return http.createServer(this.app);\n    }\n}\nexports.default = App;\n","import * as fs from 'fs';\r\n\r\n/* HTTP Imports */\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\n\r\nimport { AppConfig } from './app.config';\r\n\r\n/* Express Imports */\r\nimport * as express from 'express';\r\nimport {\r\n    cookieParser,\r\n    bodyParser,\r\n    expressValidator,\r\n} from './express.middleware';\r\n\r\nimport { Partial, Nullable, normalizePort } from '@util';\r\n\r\nimport * as Routes from './routes';\r\n\r\nexport default class App extends AppConfig {\r\n    server: http.Server | https.Server;\r\n    app: express.Application;\r\n\r\n    constructor(options: AppConfig) {\r\n        super();\r\n\r\n        for (const K in options) {\r\n            this[K] = options[K];\r\n        }\r\n    }\r\n\r\n    initialize() {\r\n        this.app = express();\r\n        this.port = normalizePort(this.port);\r\n        this.app.set('port', this.port);\r\n\r\n        this.initializeMiddleware();\r\n        this.initializeCors();\r\n        this.initializeRoutes();\r\n        this.initializeServer();\r\n    }\r\n\r\n    initializeMiddleware() {\r\n        /* Initialize Middleware */\r\n        this.app.use(cookieParser());\r\n\r\n        this.app.use(bodyParser.json());\r\n        this.app.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n        this.app.use(expressValidator());\r\n    }\r\n\r\n    initializeRoutes() {\r\n        this.app.use('/', Routes.index);\r\n    }\r\n\r\n    initializeCors() {\r\n        /* Allow CORS */\r\n        this.app.use((req, res, next) => {\r\n            res.header(\r\n                'Access-Control-Allow-Origin',\r\n                this.cors ? this.cors.origin : '*'\r\n            );\r\n            res.header(\r\n                'Access-Control-Allow-Headers',\r\n                'Origin, X-Requested-With, Content-Type, Accept'\r\n            );\r\n            res.header(\r\n                'Access-Control-Allow-Methods',\r\n                'GET, POST, OPTIONS, PUT, PATCH, DELETE'\r\n            );\r\n            next();\r\n        });\r\n    }\r\n\r\n    initializeServer() {\r\n        this.server = this.createServer();\r\n        this.server.listen(this.port);\r\n\r\n        this.server.on('error', this.onError);\r\n        this.server.on('listening', this.onListening);\r\n    }\r\n\r\n    createServer() {\r\n        if (this.useHttps) {\r\n            const _key = fs.readFileSync(this.key);\r\n            const _cert = fs.readFileSync(this.cert);\r\n            return https.createServer({ key: _key, cert: _cert }, this.app);\r\n        }\r\n        return http.createServer(this.app);\r\n    }\r\n\r\n    onError = (error: any) => {\r\n        if (error.syscall !== 'listen') {\r\n            throw error;\r\n        }\r\n\r\n        const bind =\r\n            typeof this.port === 'string'\r\n                ? 'Pipe ' + this.port\r\n                : 'Port ' + this.port;\r\n\r\n        // handle specific listen errors with friendly messages\r\n        switch (error.code) {\r\n            case 'EACCES':\r\n                console.error(bind + ' requires elevated privileges');\r\n                process.exit(1);\r\n                break;\r\n            case 'EADDRINUSE':\r\n                console.error(bind + ' is already in use');\r\n                process.exit(1);\r\n                break;\r\n            default:\r\n                throw error;\r\n        }\r\n    };\r\n\r\n    onListening = () => {\r\n        const addr = this.server.address();\r\n        const bind =\r\n            typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;\r\n        console.log('Listening on ' + bind);\r\n    };\r\n}\r\n"]}